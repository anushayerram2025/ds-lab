class MyCircularQueue:

    def _init_(self, k):
        self.data=[0]*k
        self.head=0
        self.tail=-1
        self.maxSize=k
        
        
    def enQueue(self, val) :
        if self.isFull(): return False
        self.tail = (self.tail + 1) % self.maxSize
        self.data[self.tail] = val
        return True
    def deQueue(self):
        if self.isEmpty(): return False
        if self.head == self.tail: self.head, self.tail = 0, -1
        else: self.head = (self.head + 1) % self.maxSize
        return True
    def Front(self):
        return -1 if self.isEmpty() else self.data[self.head]
    def Rear(self):
        return -1 if self.isEmpty() else self.data[self.tail]
    def isEmpty(self):
        return self.tail == -1
    def isFull(self):
        return not self.isEmpty() and (self.tail + 1) % self.maxSize == self.head
