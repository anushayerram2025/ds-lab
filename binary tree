#binary tree and traversals
class Node:
    def _init_(self,data):
        self.data=data
        self.left=None
        self.right=None
class binarytree:
    def _init_(self):
        self.root=None
        
    def add(self,data):
        tree_node=Node(data)
        if self.root==None:
            self.root=tree_node
        else:
            cu=self.root
            queue=[cu]
            while queue:
                cur=queue.pop(0)
                if cur.left:
                    if cur.right:
                        queue.append(cur.left)
                        queue.append(cur.right)
                    else:
                        cur.right=tree_node
                        break
                else:
                    cur.left=tree_node
                    break
    def bfs(self):
         cu=self.root
         queue=[cu]
         while queue:
             cur=queue.pop(0)
             print(cur.data)
             if cur.left:
                if cur.right:
                    queue.append(cur.left)
                    queue.append(cur.right)
    def inorder(self,root):
         if root.left:
             self.inorder(root.left)
         print(root.data,end=" ")
         if root.right:
             self.inorder(root.right)
    def preorder(self,root):
         print(root.data,end=" ")
         if root.left:
             self.preorder(root.left)
         
         if root.right:
             self.preorder(root.right)
    def postorder(self,root):
         
         if root.left:
             self.postorder(root.left)
         if root.right:
             self.postorder(root.right)
         print(root.data,end=" ")    
         
             
             
             
         
tree=binarytree()
tree.add(3)
tree.add(8)
tree.add(6)
tree.add(7)
tree.add(14)
tree.add(9)
tree.bfs()
tree.inorder(tree.root)
print("\n")
tree.postorder(tree.root)
print("\n")
tree.preorder(tree.root)
